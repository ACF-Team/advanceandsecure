@name Advance and Secure Cost Calculator
@persist [AASCostInfo Entities Breakdown CostBreakdown]:table [Keys]:array Run TotalCost KeyI ValI

#[
    Made by LiddulBOFH
    Autogenerated from AAS Gamemode values

    Copy Date: %s

    This script will allow you to build vehicles for Advance and Secure and keep them within a cost margin.
    This was copied to your client (or possibly someone else, if this was passed around) by the click of a button! (In the tab-map of the gamemode)

    To use this, simply paste this on the ground below the vehicle you wish to see the cost of, and it will provide a breakdown of everything.

    Cost of a vehicle is a breakdown of multiple aspects, to include weight, weaponry, ammo storage, engine power (peak torque), and miscellaneous components (E2/SF chips)
]#

if(first()){
    AASCostInfo = table()

    # These tables should be populated automatically when the script is copied from the server, if they are empty you need to let a developer know, or get a new copy!
    AASCostInfo["FilterList",table] = table(%s)
    AASCostInfo["CalcSingleFilter",table] = table(%s)
    AASCostInfo["ACFGunCost",table] = table(%s)
    AASCostInfo["ACFAmmoModifier",table] = table(%s)
    AASCostInfo["ACFMissileModifier",table] = table(%s)
    AASCostInfo["SpecialModelFilter",table] = table(%s)

    findClearWhiteList()
    foreach(_:number,V:string = AASCostInfo["FilterList",table]){findIncludeClass(V)}
    findExcludeEntity(entity())
    findInSphere(entity():pos(),256)
    findClipToPlayerProps(owner())
    Entities = findToTable()

    if(Entities:count() == 0){
        printColor(vec(255,255,255),"No entities found!")
        exit()
    }
    Breakdown = table()

    foreach(_:number,V:entity = Entities){
        local Type = V:type()
        if( !Breakdown:exists(Type) ){ Breakdown[Type,table] = table() }
        Breakdown[Type,table][Breakdown[Type,table]:count() + 1,entity] = V
    }

    printColor(vec(255,255,255),"Found " + Entities:count() + " entities. Calculating cost...")
    timer("init",50)
}

if(duped()|dupefinished()){ printColor(vec(255,255,255),"The AAS Cost Calculator is still saved in your dupe! Be sure to remove this to save on a few points.") }

function number isMissileAmmo(E:entity){
    local Bool = 0
    switch(E:acfClass()){
        case "AAM", Bool = 1 break,
        case "ARM", Bool = 1 break,
        case "ARTY", Bool = 1 break,
        case "ATGM", Bool = 1 break,
        case "BOMB", Bool = 1 break,
        case "FFAR", Bool = 1 break,
        case "GBOMB", Bool = 1 break,
        case "GBU", Bool = 1 break,
        case "SAM", Bool = 1 break,
        case "UAR", Bool = 1 break,
    }
    return Bool
}

function number calcCost(E:entity){
    local Cost = 0
    local Class = E:type()
    if(AASCostInfo["CalcSingleFilter",table]:exists(Class)){ Cost = AASCostInfo["CalcSingleFilter",table][Class,number] } else{ return 0 }

    switch(Class){
        case "acf_gun",
            local ClassMod = 1
            if(AASCostInfo["ACFGunCost",table]:exists(E:acfClass())){ClassMod = AASCostInfo["ACFGunCost",table][E:acfClass(),number]}
            Cost = ClassMod * E:acfCaliber()
        break
        case "acf_armor", Cost = 0.1 + max(0.01,E:mass() / 500) break, # All 4 of these are calculated the same, since they can all be used as armor
        case "prop_physics", Cost = 0.1 + max(0.01,E:mass() / 500) break,
        case "primitive_shape", Cost = 0.1 + max(0.01,E:mass() / 500) break,
        case "gmod_wire_gate", Cost = 0.1 + max(0.01,E:mass() / 500) break,
        case "acf_engine",
            Cost = max(5,E:acfMaxTorque() / 100)
        break,
        case "acf_rack",
            if(AASCostInfo["SpecialModelFilter",table]:exists(E:model())){Cost = AASCostInfo["SpecialModelFilter",table][E:model(),number]}else{Cost = 10}
        break,
        case "acf_ammo",
            local Capacity = E:acfCapacity()
            if(E:acfAmmoType() == "Refill"){Cost = Capacity * 0.05}
            elseif(isMissileAmmo(E)){
                local AmmoMod = 0.2
                local MissileClassMod = 10
                if(AASCostInfo["ACFAmmoModifier",table]:exists(E:acfAmmoType())){AmmoMod = AASCostInfo["ACFAmmoModifier",table][E:acfAmmoType(),number]}
                if(AASCostInfo["ACFMissileModifier",table]:exists(E:acfClass())){MissileClassMod = AASCostInfo["ACFMissileModifier",table][E:acfClass(),number]}

                Cost = Capacity * AmmoMod * MissileClassMod * max(1,(E:acfCaliber() / 100) ^ 1.5)
            }
            else{
                local AmmoMod = 0.2
                local GunClassMod = 1
                if(AASCostInfo["ACFAmmoModifier",table]:exists(E:acfAmmoType())){AmmoMod = AASCostInfo["ACFAmmoModifier",table][E:acfAmmoType(),number]}
                if(AASCostInfo["ACFGunCost",table]:exists(E:acfClass())){GunClassMod = AASCostInfo["ACFGunCost",table][E:acfClass(),number]}

                Cost = Capacity * AmmoMod * GunClassMod * ((E:acfCaliber() / 100) ^ 2)
            }
        break,
    }
    return Cost
}

if(clk("init")){
    TotalCost = 0
    CostBreakdown = table()
    Keys = Breakdown:keys()

    KeyI = 1
    ValI = 1
    Run = 1
}

if(Run){interval(50)}
while(Run & perf(100)){
    local Key = Keys[KeyI,string]
    local T = Breakdown[Key,table]
    local E = T[ValI,entity]
    
    if(!CostBreakdown:exists(Key)){CostBreakdown[Key,number] = 0}

    local Cost = calcCost(E)
    CostBreakdown[Key,number] = CostBreakdown[Key,number] + Cost
    TotalCost += Cost

    ValI++
    if(ValI > T:count()){ValI = 1 KeyI++}
    if(KeyI > Breakdown:count()){Run = 0 timer("finish",50)}
}

if(clk("finish")){
    printColor(vec(255,255,255),"+ COST BREAKDOWN")
    foreach(K:string,N:number = CostBreakdown){
        if(N == 0){CostBreakdown:remove(K)}else{printColor(vec(255,255,255),"| " + K + ": ",vec(255,127,127),round(N,2))}
    }
    TotalCost = ceil(TotalCost)
    printColor(vec(255,255,255),"+ TOTAL COST: ",vec(255,0,0),TotalCost)
}